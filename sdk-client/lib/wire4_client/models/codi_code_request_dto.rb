=begin
#Wire4RestAPI

#Referencia de la API de Wire4

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.10

=end

require 'date'

module Wire4Client
  class CodiCodeRequestDTO
    # Monto del pago CODI®
    attr_accessor :amount

    attr_accessor :beneficiary2

    # Descripción del pago CODI®, no debe contener letras con acentos ni caracteres especiales
    attr_accessor :concept

    # Fecha de operación pago CODI®, formato: yyyy-MM-dd'T'HH:mm:ss
    attr_accessor :due_date

    # Campo de metada CODI®, longitud máxima determinada por configuracion de la empresa, por defecto 100 caracteres
    attr_accessor :metadata

    # Referencia de la transferencia asignada por el cliente
    attr_accessor :order_id

    # El tipo de pago ya sea en una ocasión (ONE_OCCASION) o recurrente (RECURRENT)
    attr_accessor :payment_type

    # Número de teléfono móvil en caso de ser un pago CODI® usando 'PUSH_NOTIFICATION' estecampo sería obligatorio
    attr_accessor :phone_number

    # Referencia numérica del pago CODI®. Debe ser de 7 dígitos
    attr_accessor :reference

    # El tipo de solicitud QR o PUSH para pago con CODI®
    attr_accessor :type

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'amount' => :'amount',
        :'beneficiary2' => :'beneficiary2',
        :'concept' => :'concept',
        :'due_date' => :'due_date',
        :'metadata' => :'metadata',
        :'order_id' => :'order_id',
        :'payment_type' => :'payment_type',
        :'phone_number' => :'phone_number',
        :'reference' => :'reference',
        :'type' => :'type'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'amount' => :'Float',
        :'beneficiary2' => :'BeneficiaryDTO',
        :'concept' => :'String',
        :'due_date' => :'DateTime',
        :'metadata' => :'String',
        :'order_id' => :'String',
        :'payment_type' => :'String',
        :'phone_number' => :'String',
        :'reference' => :'Integer',
        :'type' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'amount')
        self.amount = attributes[:'amount']
      end

      if attributes.has_key?(:'beneficiary2')
        self.beneficiary2 = attributes[:'beneficiary2']
      end

      if attributes.has_key?(:'concept')
        self.concept = attributes[:'concept']
      end

      if attributes.has_key?(:'due_date')
        self.due_date = attributes[:'due_date']
      end

      if attributes.has_key?(:'metadata')
        self.metadata = attributes[:'metadata']
      end

      if attributes.has_key?(:'order_id')
        self.order_id = attributes[:'order_id']
      end

      if attributes.has_key?(:'payment_type')
        self.payment_type = attributes[:'payment_type']
      end

      if attributes.has_key?(:'phone_number')
        self.phone_number = attributes[:'phone_number']
      end

      if attributes.has_key?(:'reference')
        self.reference = attributes[:'reference']
      end

      if attributes.has_key?(:'type')
        self.type = attributes[:'type']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@amount.nil? && @amount > 8000
        invalid_properties.push('invalid value for "amount", must be smaller than or equal to 8000.')
      end

      if !@amount.nil? && @amount < 0.01
        invalid_properties.push('invalid value for "amount", must be greater than or equal to 0.01.')
      end

      if @concept.nil?
        invalid_properties.push('invalid value for "concept", concept cannot be nil.')
      end

      if @concept.to_s.length > 40
        invalid_properties.push('invalid value for "concept", the character length must be smaller than or equal to 40.')
      end

      if @concept.to_s.length < 0
        invalid_properties.push('invalid value for "concept", the character length must be great than or equal to 0.')
      end

      if @order_id.nil?
        invalid_properties.push('invalid value for "order_id", order_id cannot be nil.')
      end

      if @order_id.to_s.length > 36
        invalid_properties.push('invalid value for "order_id", the character length must be smaller than or equal to 36.')
      end

      if @order_id.to_s.length < 5
        invalid_properties.push('invalid value for "order_id", the character length must be great than or equal to 5.')
      end

      if @payment_type.nil?
        invalid_properties.push('invalid value for "payment_type", payment_type cannot be nil.')
      end

      if !@phone_number.nil? && @phone_number.to_s.length > 10
        invalid_properties.push('invalid value for "phone_number", the character length must be smaller than or equal to 10.')
      end

      if !@phone_number.nil? && @phone_number.to_s.length < 10
        invalid_properties.push('invalid value for "phone_number", the character length must be great than or equal to 10.')
      end

      if @reference.nil?
        invalid_properties.push('invalid value for "reference", reference cannot be nil.')
      end

      if @reference > 9999999
        invalid_properties.push('invalid value for "reference", must be smaller than or equal to 9999999.')
      end

      if @reference < 0
        invalid_properties.push('invalid value for "reference", must be greater than or equal to 0.')
      end

      if @type.nil?
        invalid_properties.push('invalid value for "type", type cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@amount.nil? && @amount > 8000
      return false if !@amount.nil? && @amount < 0.01
      return false if @concept.nil?
      return false if @concept.to_s.length > 40
      return false if @concept.to_s.length < 0
      return false if @order_id.nil?
      return false if @order_id.to_s.length > 36
      return false if @order_id.to_s.length < 5
      return false if @payment_type.nil?
      payment_type_validator = EnumAttributeValidator.new('String', ['ONE_OCCASION', 'RECURRENT', 'RECURRENT_NO_RECURRENT', 'UNKNOWN'])
      return false unless payment_type_validator.valid?(@payment_type)
      return false if !@phone_number.nil? && @phone_number.to_s.length > 10
      return false if !@phone_number.nil? && @phone_number.to_s.length < 10
      return false if @reference.nil?
      return false if @reference > 9999999
      return false if @reference < 0
      return false if @type.nil?
      type_validator = EnumAttributeValidator.new('String', ['PUSH_NOTIFICATION', 'QR_CODE', 'UNKNOWN'])
      return false unless type_validator.valid?(@type)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] amount Value to be assigned
    def amount=(amount)
      if !amount.nil? && amount > 8000
        fail ArgumentError, 'invalid value for "amount", must be smaller than or equal to 8000.'
      end

      if !amount.nil? && amount < 0.01
        fail ArgumentError, 'invalid value for "amount", must be greater than or equal to 0.01.'
      end

      @amount = amount
    end

    # Custom attribute writer method with validation
    # @param [Object] concept Value to be assigned
    def concept=(concept)
      if concept.nil?
        fail ArgumentError, 'concept cannot be nil'
      end

      if concept.to_s.length > 40
        fail ArgumentError, 'invalid value for "concept", the character length must be smaller than or equal to 40.'
      end

      if concept.to_s.length < 0
        fail ArgumentError, 'invalid value for "concept", the character length must be great than or equal to 0.'
      end

      @concept = concept
    end

    # Custom attribute writer method with validation
    # @param [Object] order_id Value to be assigned
    def order_id=(order_id)
      if order_id.nil?
        fail ArgumentError, 'order_id cannot be nil'
      end

      if order_id.to_s.length > 36
        fail ArgumentError, 'invalid value for "order_id", the character length must be smaller than or equal to 36.'
      end

      if order_id.to_s.length < 5
        fail ArgumentError, 'invalid value for "order_id", the character length must be great than or equal to 5.'
      end

      @order_id = order_id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_type Object to be assigned
    def payment_type=(payment_type)
      validator = EnumAttributeValidator.new('String', ['ONE_OCCASION', 'RECURRENT', 'RECURRENT_NO_RECURRENT', 'UNKNOWN'])
      unless validator.valid?(payment_type)
        fail ArgumentError, 'invalid value for "payment_type", must be one of #{validator.allowable_values}.'
      end
      @payment_type = payment_type
    end

    # Custom attribute writer method with validation
    # @param [Object] phone_number Value to be assigned
    def phone_number=(phone_number)
      if !phone_number.nil? && phone_number.to_s.length > 10
        fail ArgumentError, 'invalid value for "phone_number", the character length must be smaller than or equal to 10.'
      end

      if !phone_number.nil? && phone_number.to_s.length < 10
        fail ArgumentError, 'invalid value for "phone_number", the character length must be great than or equal to 10.'
      end

      @phone_number = phone_number
    end

    # Custom attribute writer method with validation
    # @param [Object] reference Value to be assigned
    def reference=(reference)
      if reference.nil?
        fail ArgumentError, 'reference cannot be nil'
      end

      if reference > 9999999
        fail ArgumentError, 'invalid value for "reference", must be smaller than or equal to 9999999.'
      end

      if reference < 0
        fail ArgumentError, 'invalid value for "reference", must be greater than or equal to 0.'
      end

      @reference = reference
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      validator = EnumAttributeValidator.new('String', ['PUSH_NOTIFICATION', 'QR_CODE', 'UNKNOWN'])
      unless validator.valid?(type)
        fail ArgumentError, 'invalid value for "type", must be one of #{validator.allowable_values}.'
      end
      @type = type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          amount == o.amount &&
          beneficiary2 == o.beneficiary2 &&
          concept == o.concept &&
          due_date == o.due_date &&
          metadata == o.metadata &&
          order_id == o.order_id &&
          payment_type == o.payment_type &&
          phone_number == o.phone_number &&
          reference == o.reference &&
          type == o.type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [amount, beneficiary2, concept, due_date, metadata, order_id, payment_type, phone_number, reference, type].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Wire4Client.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
