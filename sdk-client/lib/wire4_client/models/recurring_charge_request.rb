=begin
#Wire4RestAPI

#Referencia de la API de Wire4

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.10

=end

require 'date'

module Wire4Client
  # Objeto request para solictar la aplicación de Cargos Recurrentes
  class RecurringChargeRequest
    # Es la dirección URL a la que se redirigirá en caso de que el usuario cancele.
    attr_accessor :cancel_return_url

    # Número de cargos que se aplicarán a la tarjeta del cliente final a partir de la fecha del primer cargo
    attr_accessor :charges

    attr_accessor :customer

    # Fecha en la que se aplicará el primer cargo a la tarjeta del cliente final 
    attr_accessor :first_charge_date

    # Número de orden asignado por el cliente de Wire4
    attr_accessor :order_id

    attr_accessor :product

    # Es la dirección URL a la que se redirigirá en caso de éxito.
    attr_accessor :return_url

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'cancel_return_url' => :'cancel_return_url',
        :'charges' => :'charges',
        :'customer' => :'customer',
        :'first_charge_date' => :'first_charge_date',
        :'order_id' => :'order_id',
        :'product' => :'product',
        :'return_url' => :'return_url'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'cancel_return_url' => :'String',
        :'charges' => :'Integer',
        :'customer' => :'Customer',
        :'first_charge_date' => :'DateTime',
        :'order_id' => :'String',
        :'product' => :'Product',
        :'return_url' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'cancel_return_url')
        self.cancel_return_url = attributes[:'cancel_return_url']
      end

      if attributes.has_key?(:'charges')
        self.charges = attributes[:'charges']
      end

      if attributes.has_key?(:'customer')
        self.customer = attributes[:'customer']
      end

      if attributes.has_key?(:'first_charge_date')
        self.first_charge_date = attributes[:'first_charge_date']
      end

      if attributes.has_key?(:'order_id')
        self.order_id = attributes[:'order_id']
      end

      if attributes.has_key?(:'product')
        self.product = attributes[:'product']
      end

      if attributes.has_key?(:'return_url')
        self.return_url = attributes[:'return_url']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @cancel_return_url.nil?
        invalid_properties.push('invalid value for "cancel_return_url", cancel_return_url cannot be nil.')
      end

      if @charges.nil?
        invalid_properties.push('invalid value for "charges", charges cannot be nil.')
      end

      if @customer.nil?
        invalid_properties.push('invalid value for "customer", customer cannot be nil.')
      end

      if @first_charge_date.nil?
        invalid_properties.push('invalid value for "first_charge_date", first_charge_date cannot be nil.')
      end

      if @order_id.nil?
        invalid_properties.push('invalid value for "order_id", order_id cannot be nil.')
      end

      if @product.nil?
        invalid_properties.push('invalid value for "product", product cannot be nil.')
      end

      if @return_url.nil?
        invalid_properties.push('invalid value for "return_url", return_url cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @cancel_return_url.nil?
      return false if @charges.nil?
      return false if @customer.nil?
      return false if @first_charge_date.nil?
      return false if @order_id.nil?
      return false if @product.nil?
      return false if @return_url.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          cancel_return_url == o.cancel_return_url &&
          charges == o.charges &&
          customer == o.customer &&
          first_charge_date == o.first_charge_date &&
          order_id == o.order_id &&
          product == o.product &&
          return_url == o.return_url
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [cancel_return_url, charges, customer, first_charge_date, order_id, product, return_url].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Wire4Client.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
