=begin
#Wire4RestAPI

#Referencia de la API de Wire4

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.10

=end

require 'date'

module Wire4Client
  class CepSearchBanxico
    # Monto de la transferencia
    attr_accessor :amount

    # Cuenta de beneficiario
    attr_accessor :beneficiary_account

    # Clave del banco beneficiario, se puede obtener este valor del listado de institucines '/institutions'. Si este valor no esta presente se obtiene de la cuenta del beneficiario, si la cuenta de beneficiario es un número celular este campo es requerido
    attr_accessor :beneficiary_bank_key

    # Clave de rastreo de la transferencia
    attr_accessor :clave_rastreo

    # Fecha de operación de la transferencia, formato: dd-MM-yyyy
    attr_accessor :operation_date

    # Referencia numérica de la transferencia
    attr_accessor :reference

    # Cuenta ordenante, es requerida cuando se no se envía la clave del banco ordenante 
    attr_accessor :sender_account

    # Clave del banco ordenante, se puede obtener este valor del listado de institucines '/institutions'. Es requerida cuando no se envía la cuenta ordenante
    attr_accessor :sender_bank_key

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'amount' => :'amount',
        :'beneficiary_account' => :'beneficiary_account',
        :'beneficiary_bank_key' => :'beneficiary_bank_key',
        :'clave_rastreo' => :'clave_rastreo',
        :'operation_date' => :'operation_date',
        :'reference' => :'reference',
        :'sender_account' => :'sender_account',
        :'sender_bank_key' => :'sender_bank_key'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'amount' => :'Float',
        :'beneficiary_account' => :'String',
        :'beneficiary_bank_key' => :'String',
        :'clave_rastreo' => :'String',
        :'operation_date' => :'String',
        :'reference' => :'String',
        :'sender_account' => :'String',
        :'sender_bank_key' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'amount')
        self.amount = attributes[:'amount']
      end

      if attributes.has_key?(:'beneficiary_account')
        self.beneficiary_account = attributes[:'beneficiary_account']
      end

      if attributes.has_key?(:'beneficiary_bank_key')
        self.beneficiary_bank_key = attributes[:'beneficiary_bank_key']
      end

      if attributes.has_key?(:'clave_rastreo')
        self.clave_rastreo = attributes[:'clave_rastreo']
      end

      if attributes.has_key?(:'operation_date')
        self.operation_date = attributes[:'operation_date']
      end

      if attributes.has_key?(:'reference')
        self.reference = attributes[:'reference']
      end

      if attributes.has_key?(:'sender_account')
        self.sender_account = attributes[:'sender_account']
      end

      if attributes.has_key?(:'sender_bank_key')
        self.sender_bank_key = attributes[:'sender_bank_key']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @amount.nil?
        invalid_properties.push('invalid value for "amount", amount cannot be nil.')
      end

      if @beneficiary_account.nil?
        invalid_properties.push('invalid value for "beneficiary_account", beneficiary_account cannot be nil.')
      end

      if !@beneficiary_bank_key.nil? && @beneficiary_bank_key.to_s.length > 5
        invalid_properties.push('invalid value for "beneficiary_bank_key", the character length must be smaller than or equal to 5.')
      end

      if !@beneficiary_bank_key.nil? && @beneficiary_bank_key.to_s.length < 1
        invalid_properties.push('invalid value for "beneficiary_bank_key", the character length must be great than or equal to 1.')
      end

      if !@beneficiary_bank_key.nil? && @beneficiary_bank_key !~ Regexp.new(/[0-9][0-9]*/)
        invalid_properties.push('invalid value for "beneficiary_bank_key", must conform to the pattern /[0-9][0-9]*/.')
      end

      if @clave_rastreo.nil?
        invalid_properties.push('invalid value for "clave_rastreo", clave_rastreo cannot be nil.')
      end

      if @operation_date.nil?
        invalid_properties.push('invalid value for "operation_date", operation_date cannot be nil.')
      end

      if !@reference.nil? && @reference.to_s.length > 7
        invalid_properties.push('invalid value for "reference", the character length must be smaller than or equal to 7.')
      end

      if !@reference.nil? && @reference.to_s.length < 1
        invalid_properties.push('invalid value for "reference", the character length must be great than or equal to 1.')
      end

      if !@reference.nil? && @reference !~ Regexp.new(/[0-9][0-9]*/)
        invalid_properties.push('invalid value for "reference", must conform to the pattern /[0-9][0-9]*/.')
      end

      if !@sender_bank_key.nil? && @sender_bank_key.to_s.length > 5
        invalid_properties.push('invalid value for "sender_bank_key", the character length must be smaller than or equal to 5.')
      end

      if !@sender_bank_key.nil? && @sender_bank_key.to_s.length < 1
        invalid_properties.push('invalid value for "sender_bank_key", the character length must be great than or equal to 1.')
      end

      if !@sender_bank_key.nil? && @sender_bank_key !~ Regexp.new(/[0-9][0-9]*/)
        invalid_properties.push('invalid value for "sender_bank_key", must conform to the pattern /[0-9][0-9]*/.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @amount.nil?
      return false if @beneficiary_account.nil?
      return false if !@beneficiary_bank_key.nil? && @beneficiary_bank_key.to_s.length > 5
      return false if !@beneficiary_bank_key.nil? && @beneficiary_bank_key.to_s.length < 1
      return false if !@beneficiary_bank_key.nil? && @beneficiary_bank_key !~ Regexp.new(/[0-9][0-9]*/)
      return false if @clave_rastreo.nil?
      return false if @operation_date.nil?
      return false if !@reference.nil? && @reference.to_s.length > 7
      return false if !@reference.nil? && @reference.to_s.length < 1
      return false if !@reference.nil? && @reference !~ Regexp.new(/[0-9][0-9]*/)
      return false if !@sender_bank_key.nil? && @sender_bank_key.to_s.length > 5
      return false if !@sender_bank_key.nil? && @sender_bank_key.to_s.length < 1
      return false if !@sender_bank_key.nil? && @sender_bank_key !~ Regexp.new(/[0-9][0-9]*/)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] beneficiary_bank_key Value to be assigned
    def beneficiary_bank_key=(beneficiary_bank_key)
      if !beneficiary_bank_key.nil? && beneficiary_bank_key.to_s.length > 5
        fail ArgumentError, 'invalid value for "beneficiary_bank_key", the character length must be smaller than or equal to 5.'
      end

      if !beneficiary_bank_key.nil? && beneficiary_bank_key.to_s.length < 1
        fail ArgumentError, 'invalid value for "beneficiary_bank_key", the character length must be great than or equal to 1.'
      end

      if !beneficiary_bank_key.nil? && beneficiary_bank_key !~ Regexp.new(/[0-9][0-9]*/)
        fail ArgumentError, 'invalid value for "beneficiary_bank_key", must conform to the pattern /[0-9][0-9]*/.'
      end

      @beneficiary_bank_key = beneficiary_bank_key
    end

    # Custom attribute writer method with validation
    # @param [Object] reference Value to be assigned
    def reference=(reference)
      if !reference.nil? && reference.to_s.length > 7
        fail ArgumentError, 'invalid value for "reference", the character length must be smaller than or equal to 7.'
      end

      if !reference.nil? && reference.to_s.length < 1
        fail ArgumentError, 'invalid value for "reference", the character length must be great than or equal to 1.'
      end

      if !reference.nil? && reference !~ Regexp.new(/[0-9][0-9]*/)
        fail ArgumentError, 'invalid value for "reference", must conform to the pattern /[0-9][0-9]*/.'
      end

      @reference = reference
    end

    # Custom attribute writer method with validation
    # @param [Object] sender_bank_key Value to be assigned
    def sender_bank_key=(sender_bank_key)
      if !sender_bank_key.nil? && sender_bank_key.to_s.length > 5
        fail ArgumentError, 'invalid value for "sender_bank_key", the character length must be smaller than or equal to 5.'
      end

      if !sender_bank_key.nil? && sender_bank_key.to_s.length < 1
        fail ArgumentError, 'invalid value for "sender_bank_key", the character length must be great than or equal to 1.'
      end

      if !sender_bank_key.nil? && sender_bank_key !~ Regexp.new(/[0-9][0-9]*/)
        fail ArgumentError, 'invalid value for "sender_bank_key", must conform to the pattern /[0-9][0-9]*/.'
      end

      @sender_bank_key = sender_bank_key
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          amount == o.amount &&
          beneficiary_account == o.beneficiary_account &&
          beneficiary_bank_key == o.beneficiary_bank_key &&
          clave_rastreo == o.clave_rastreo &&
          operation_date == o.operation_date &&
          reference == o.reference &&
          sender_account == o.sender_account &&
          sender_bank_key == o.sender_bank_key
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [amount, beneficiary_account, beneficiary_bank_key, clave_rastreo, operation_date, reference, sender_account, sender_bank_key].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Wire4Client.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
