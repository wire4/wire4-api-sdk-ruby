=begin
#Wire4RestAPI

#Referencia de la API de Wire4

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.10

=end

require 'date'

module Wire4Client
  class CepResponse
    # Cuenta del beneficiario
    attr_accessor :account_beneficiary

    # Cuenta del ordenante
    attr_accessor :account_sender

    # Monto de la transferencia
    attr_accessor :amount

    # Indica si o no el CEP se encuentra disponible
    attr_accessor :available

    # Clave del banco beneficiario
    attr_accessor :beneficiary_bank_key

    # Nombre del beneficiario
    attr_accessor :beneficiary_name

    # RFC del beneficiario
    attr_accessor :beneficiary_rfc

    # Cadena original del CEP
    attr_accessor :cadena_original

    # Fecha de captura de la transferencia
    attr_accessor :capture_date

    # Número de serie del certificado
    attr_accessor :certificate_serial_number

    # Clave de rastreo
    attr_accessor :clave_rastreo

    # Descripción de la transferencia
    attr_accessor :description

    # IVA de la transferencia
    attr_accessor :iva

    # Fecha de operación de la transferencia
    attr_accessor :operation_date

    # Fecha de abono registrada en el CEP
    attr_accessor :operation_date_cep

    # Referencia numérica de la transferencia
    attr_accessor :reference

    # Clave del banco emisor
    attr_accessor :sender_bank_key

    # Nombre del emisor
    attr_accessor :sender_name

    # RFC del emisor
    attr_accessor :sender_rfc

    # Firma del CEP
    attr_accessor :signature

    # La url al archivo zip del CEP, el cual contiene el xml y pdf
    attr_accessor :url_zip

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'account_beneficiary' => :'account_beneficiary',
        :'account_sender' => :'account_sender',
        :'amount' => :'amount',
        :'available' => :'available',
        :'beneficiary_bank_key' => :'beneficiary_bank_key',
        :'beneficiary_name' => :'beneficiary_name',
        :'beneficiary_rfc' => :'beneficiary_rfc',
        :'cadena_original' => :'cadena_original',
        :'capture_date' => :'capture_date',
        :'certificate_serial_number' => :'certificate_serial_number',
        :'clave_rastreo' => :'clave_rastreo',
        :'description' => :'description',
        :'iva' => :'iva',
        :'operation_date' => :'operation_date',
        :'operation_date_cep' => :'operation_date_cep',
        :'reference' => :'reference',
        :'sender_bank_key' => :'sender_bank_key',
        :'sender_name' => :'sender_name',
        :'sender_rfc' => :'sender_rfc',
        :'signature' => :'signature',
        :'url_zip' => :'url_zip'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'account_beneficiary' => :'String',
        :'account_sender' => :'String',
        :'amount' => :'Float',
        :'available' => :'BOOLEAN',
        :'beneficiary_bank_key' => :'String',
        :'beneficiary_name' => :'String',
        :'beneficiary_rfc' => :'String',
        :'cadena_original' => :'String',
        :'capture_date' => :'DateTime',
        :'certificate_serial_number' => :'String',
        :'clave_rastreo' => :'String',
        :'description' => :'String',
        :'iva' => :'Float',
        :'operation_date' => :'DateTime',
        :'operation_date_cep' => :'DateTime',
        :'reference' => :'String',
        :'sender_bank_key' => :'String',
        :'sender_name' => :'String',
        :'sender_rfc' => :'String',
        :'signature' => :'String',
        :'url_zip' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'account_beneficiary')
        self.account_beneficiary = attributes[:'account_beneficiary']
      end

      if attributes.has_key?(:'account_sender')
        self.account_sender = attributes[:'account_sender']
      end

      if attributes.has_key?(:'amount')
        self.amount = attributes[:'amount']
      end

      if attributes.has_key?(:'available')
        self.available = attributes[:'available']
      end

      if attributes.has_key?(:'beneficiary_bank_key')
        self.beneficiary_bank_key = attributes[:'beneficiary_bank_key']
      end

      if attributes.has_key?(:'beneficiary_name')
        self.beneficiary_name = attributes[:'beneficiary_name']
      end

      if attributes.has_key?(:'beneficiary_rfc')
        self.beneficiary_rfc = attributes[:'beneficiary_rfc']
      end

      if attributes.has_key?(:'cadena_original')
        self.cadena_original = attributes[:'cadena_original']
      end

      if attributes.has_key?(:'capture_date')
        self.capture_date = attributes[:'capture_date']
      end

      if attributes.has_key?(:'certificate_serial_number')
        self.certificate_serial_number = attributes[:'certificate_serial_number']
      end

      if attributes.has_key?(:'clave_rastreo')
        self.clave_rastreo = attributes[:'clave_rastreo']
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'iva')
        self.iva = attributes[:'iva']
      end

      if attributes.has_key?(:'operation_date')
        self.operation_date = attributes[:'operation_date']
      end

      if attributes.has_key?(:'operation_date_cep')
        self.operation_date_cep = attributes[:'operation_date_cep']
      end

      if attributes.has_key?(:'reference')
        self.reference = attributes[:'reference']
      end

      if attributes.has_key?(:'sender_bank_key')
        self.sender_bank_key = attributes[:'sender_bank_key']
      end

      if attributes.has_key?(:'sender_name')
        self.sender_name = attributes[:'sender_name']
      end

      if attributes.has_key?(:'sender_rfc')
        self.sender_rfc = attributes[:'sender_rfc']
      end

      if attributes.has_key?(:'signature')
        self.signature = attributes[:'signature']
      end

      if attributes.has_key?(:'url_zip')
        self.url_zip = attributes[:'url_zip']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          account_beneficiary == o.account_beneficiary &&
          account_sender == o.account_sender &&
          amount == o.amount &&
          available == o.available &&
          beneficiary_bank_key == o.beneficiary_bank_key &&
          beneficiary_name == o.beneficiary_name &&
          beneficiary_rfc == o.beneficiary_rfc &&
          cadena_original == o.cadena_original &&
          capture_date == o.capture_date &&
          certificate_serial_number == o.certificate_serial_number &&
          clave_rastreo == o.clave_rastreo &&
          description == o.description &&
          iva == o.iva &&
          operation_date == o.operation_date &&
          operation_date_cep == o.operation_date_cep &&
          reference == o.reference &&
          sender_bank_key == o.sender_bank_key &&
          sender_name == o.sender_name &&
          sender_rfc == o.sender_rfc &&
          signature == o.signature &&
          url_zip == o.url_zip
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [account_beneficiary, account_sender, amount, available, beneficiary_bank_key, beneficiary_name, beneficiary_rfc, cadena_original, capture_date, certificate_serial_number, clave_rastreo, description, iva, operation_date, operation_date_cep, reference, sender_bank_key, sender_name, sender_rfc, signature, url_zip].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Wire4Client.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
