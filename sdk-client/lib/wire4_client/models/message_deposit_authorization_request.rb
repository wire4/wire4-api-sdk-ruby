=begin
#Wire4RestAPI

#Referencia de la API de Wire4

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.10

=end

require 'date'

module Wire4Client
  # El mensaje que se envía mediante (webHook) con la información de un deposito que necesita ser autorizado
  class MessageDepositAuthorizationRequest
    # Monto de la transferencia
    attr_accessor :amount

    # Cuenta del beneficiario
    attr_accessor :beneficiary_account

    # Nombre del beneficiario
    attr_accessor :beneficiary_name

    # RFC del beneficiario
    attr_accessor :beneficiary_rfc

    # Clave de rastreo de la transferencia
    attr_accessor :clave_rastreo

    # Fecha de confirmación de la transferencia
    attr_accessor :confirm_date

    # Código de moneda de la transferencia, puede ser MXP, USD
    attr_accessor :currency_code

    # Fecha de recepción de la transferencia
    attr_accessor :deposit_date

    # Nombre del depositante, en caso que la transferencia se reciba en una cuenta de depositante
    attr_accessor :depositant

    # CLABE del depositante, en caso que la transferencia se reciba en una cuenta de depositante
    attr_accessor :depositant_clabe

    # Correo electrónico del depositante, en caso que la transferencia se reciba en una cuenta de depositante
    attr_accessor :depositant_email

    # RFC del depositante, en caso que la transferencia se reciba en una cuenta de depositante
    attr_accessor :depositant_rfc

    # Concepto de la transferencia
    attr_accessor :description

    # Descripción de Monex para la transferencia
    attr_accessor :monex_description

    # Identificador asignado por Monex a la transferencia
    attr_accessor :monex_transaction_id

    # Referecia de la transferencia
    attr_accessor :reference

    # Cuenta del ordenante, podría ser un número celular, TDD o Cuenta CLABE interbancaria
    attr_accessor :sender_account

    # Información del banco del ordenante
    attr_accessor :sender_bank

    # Nombre del ordenante
    attr_accessor :sender_name

    # RFC del ordenante
    attr_accessor :sender_rfc

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'amount' => :'amount',
        :'beneficiary_account' => :'beneficiary_account',
        :'beneficiary_name' => :'beneficiary_name',
        :'beneficiary_rfc' => :'beneficiary_rfc',
        :'clave_rastreo' => :'clave_rastreo',
        :'confirm_date' => :'confirm_date',
        :'currency_code' => :'currency_code',
        :'deposit_date' => :'deposit_date',
        :'depositant' => :'depositant',
        :'depositant_clabe' => :'depositant_clabe',
        :'depositant_email' => :'depositant_email',
        :'depositant_rfc' => :'depositant_rfc',
        :'description' => :'description',
        :'monex_description' => :'monex_description',
        :'monex_transaction_id' => :'monex_transaction_id',
        :'reference' => :'reference',
        :'sender_account' => :'sender_account',
        :'sender_bank' => :'sender_bank',
        :'sender_name' => :'sender_name',
        :'sender_rfc' => :'sender_rfc'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'amount' => :'Float',
        :'beneficiary_account' => :'String',
        :'beneficiary_name' => :'String',
        :'beneficiary_rfc' => :'String',
        :'clave_rastreo' => :'String',
        :'confirm_date' => :'DateTime',
        :'currency_code' => :'String',
        :'deposit_date' => :'DateTime',
        :'depositant' => :'String',
        :'depositant_clabe' => :'String',
        :'depositant_email' => :'String',
        :'depositant_rfc' => :'String',
        :'description' => :'String',
        :'monex_description' => :'String',
        :'monex_transaction_id' => :'String',
        :'reference' => :'String',
        :'sender_account' => :'String',
        :'sender_bank' => :'MessageInstitution',
        :'sender_name' => :'String',
        :'sender_rfc' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'amount')
        self.amount = attributes[:'amount']
      end

      if attributes.has_key?(:'beneficiary_account')
        self.beneficiary_account = attributes[:'beneficiary_account']
      end

      if attributes.has_key?(:'beneficiary_name')
        self.beneficiary_name = attributes[:'beneficiary_name']
      end

      if attributes.has_key?(:'beneficiary_rfc')
        self.beneficiary_rfc = attributes[:'beneficiary_rfc']
      end

      if attributes.has_key?(:'clave_rastreo')
        self.clave_rastreo = attributes[:'clave_rastreo']
      end

      if attributes.has_key?(:'confirm_date')
        self.confirm_date = attributes[:'confirm_date']
      end

      if attributes.has_key?(:'currency_code')
        self.currency_code = attributes[:'currency_code']
      end

      if attributes.has_key?(:'deposit_date')
        self.deposit_date = attributes[:'deposit_date']
      end

      if attributes.has_key?(:'depositant')
        self.depositant = attributes[:'depositant']
      end

      if attributes.has_key?(:'depositant_clabe')
        self.depositant_clabe = attributes[:'depositant_clabe']
      end

      if attributes.has_key?(:'depositant_email')
        self.depositant_email = attributes[:'depositant_email']
      end

      if attributes.has_key?(:'depositant_rfc')
        self.depositant_rfc = attributes[:'depositant_rfc']
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'monex_description')
        self.monex_description = attributes[:'monex_description']
      end

      if attributes.has_key?(:'monex_transaction_id')
        self.monex_transaction_id = attributes[:'monex_transaction_id']
      end

      if attributes.has_key?(:'reference')
        self.reference = attributes[:'reference']
      end

      if attributes.has_key?(:'sender_account')
        self.sender_account = attributes[:'sender_account']
      end

      if attributes.has_key?(:'sender_bank')
        self.sender_bank = attributes[:'sender_bank']
      end

      if attributes.has_key?(:'sender_name')
        self.sender_name = attributes[:'sender_name']
      end

      if attributes.has_key?(:'sender_rfc')
        self.sender_rfc = attributes[:'sender_rfc']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          amount == o.amount &&
          beneficiary_account == o.beneficiary_account &&
          beneficiary_name == o.beneficiary_name &&
          beneficiary_rfc == o.beneficiary_rfc &&
          clave_rastreo == o.clave_rastreo &&
          confirm_date == o.confirm_date &&
          currency_code == o.currency_code &&
          deposit_date == o.deposit_date &&
          depositant == o.depositant &&
          depositant_clabe == o.depositant_clabe &&
          depositant_email == o.depositant_email &&
          depositant_rfc == o.depositant_rfc &&
          description == o.description &&
          monex_description == o.monex_description &&
          monex_transaction_id == o.monex_transaction_id &&
          reference == o.reference &&
          sender_account == o.sender_account &&
          sender_bank == o.sender_bank &&
          sender_name == o.sender_name &&
          sender_rfc == o.sender_rfc
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [amount, beneficiary_account, beneficiary_name, beneficiary_rfc, clave_rastreo, confirm_date, currency_code, deposit_date, depositant, depositant_clabe, depositant_email, depositant_rfc, description, monex_description, monex_transaction_id, reference, sender_account, sender_bank, sender_name, sender_rfc].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Wire4Client.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
