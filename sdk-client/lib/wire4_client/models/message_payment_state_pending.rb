=begin
#Wire4RestAPI

#Referencia de API. La API de Wire4 está organizada en torno a REST

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.10

=end

require 'date'

module Wire4Client
  # Es el objeto del mensaje que se envía mediante webhook con la información de una transferencia que está pendiente de ser completada.
  class MessagePaymentStatePending
    # Es la cuenta del ordenante.
    attr_accessor :account

    # Es el monto de la transferencia.
    attr_accessor :amount

    # Es la cuenta del beneficiario.
    attr_accessor :beneficiary_account

    # Es el banco del beneficiario.
    attr_accessor :beneficiary_bank

    # Es el nombre del beneficiario.
    attr_accessor :beneficiary_name

    # Es el concepto de la transferencia de salida.
    attr_accessor :concept

    # Código de divisa de la transferencia de salida. Es en el formato estándar ISO 4217 y es de 3 dígitos. Ejemplo: \"MXN\".
    attr_accessor :currency_code

    # Es el Mensaje de detención de Monex, indica la causa por la cuál esta detenida la operación en Monex.
    attr_accessor :detention_message

    # Es el mensaje de error.
    attr_accessor :error_message

    # El identificador de la transferencia de salida.
    attr_accessor :order_id

    # Es el identificador de la orden de pago de Monex de la transferencia de salida.
    attr_accessor :payment_order_id

    # Es el esaado que identifica la causa por la que la transferencia se ecuentra detenida o  pendiente de procesarse. Los posibles estados son: <ul><li>FI=Fondos Insuficientes</li><li>FM=Firma mancomunada, en espera de ingreso de segundo token de autorización</li><li>DP=Se detecto una transferencia duplicada que esta en wspera de confirmación o de eliminación</li></ul>
    attr_accessor :pending_reason

    # Es la referecia de la transferencia.
    attr_accessor :reference

    # Es el identificador, en esta API, de la petición de envío de la transferencia de salida.
    attr_accessor :request_id

    # Es el estado (estatus) de la transferencia de salida. Deberá ser \"PENDING\".
    attr_accessor :status_code

    # Es el identificador de Monex de la transferencia de salida, podría no estar presente por lo que Usted debería hacer referencias mediate el paymentOrderID.
    attr_accessor :transaction_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'account' => :'account',
        :'amount' => :'amount',
        :'beneficiary_account' => :'beneficiary_account',
        :'beneficiary_bank' => :'beneficiary_bank',
        :'beneficiary_name' => :'beneficiary_name',
        :'concept' => :'concept',
        :'currency_code' => :'currency_code',
        :'detention_message' => :'detention_message',
        :'error_message' => :'error_message',
        :'order_id' => :'order_id',
        :'payment_order_id' => :'payment_order_id',
        :'pending_reason' => :'pending_reason',
        :'reference' => :'reference',
        :'request_id' => :'request_id',
        :'status_code' => :'status_code',
        :'transaction_id' => :'transaction_id'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'account' => :'String',
        :'amount' => :'Float',
        :'beneficiary_account' => :'String',
        :'beneficiary_bank' => :'MessageInstitution',
        :'beneficiary_name' => :'String',
        :'concept' => :'String',
        :'currency_code' => :'String',
        :'detention_message' => :'String',
        :'error_message' => :'String',
        :'order_id' => :'String',
        :'payment_order_id' => :'Integer',
        :'pending_reason' => :'String',
        :'reference' => :'Integer',
        :'request_id' => :'String',
        :'status_code' => :'String',
        :'transaction_id' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'account')
        self.account = attributes[:'account']
      end

      if attributes.has_key?(:'amount')
        self.amount = attributes[:'amount']
      end

      if attributes.has_key?(:'beneficiary_account')
        self.beneficiary_account = attributes[:'beneficiary_account']
      end

      if attributes.has_key?(:'beneficiary_bank')
        self.beneficiary_bank = attributes[:'beneficiary_bank']
      end

      if attributes.has_key?(:'beneficiary_name')
        self.beneficiary_name = attributes[:'beneficiary_name']
      end

      if attributes.has_key?(:'concept')
        self.concept = attributes[:'concept']
      end

      if attributes.has_key?(:'currency_code')
        self.currency_code = attributes[:'currency_code']
      end

      if attributes.has_key?(:'detention_message')
        self.detention_message = attributes[:'detention_message']
      end

      if attributes.has_key?(:'error_message')
        self.error_message = attributes[:'error_message']
      end

      if attributes.has_key?(:'order_id')
        self.order_id = attributes[:'order_id']
      end

      if attributes.has_key?(:'payment_order_id')
        self.payment_order_id = attributes[:'payment_order_id']
      end

      if attributes.has_key?(:'pending_reason')
        self.pending_reason = attributes[:'pending_reason']
      end

      if attributes.has_key?(:'reference')
        self.reference = attributes[:'reference']
      end

      if attributes.has_key?(:'request_id')
        self.request_id = attributes[:'request_id']
      end

      if attributes.has_key?(:'status_code')
        self.status_code = attributes[:'status_code']
      end

      if attributes.has_key?(:'transaction_id')
        self.transaction_id = attributes[:'transaction_id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          account == o.account &&
          amount == o.amount &&
          beneficiary_account == o.beneficiary_account &&
          beneficiary_bank == o.beneficiary_bank &&
          beneficiary_name == o.beneficiary_name &&
          concept == o.concept &&
          currency_code == o.currency_code &&
          detention_message == o.detention_message &&
          error_message == o.error_message &&
          order_id == o.order_id &&
          payment_order_id == o.payment_order_id &&
          pending_reason == o.pending_reason &&
          reference == o.reference &&
          request_id == o.request_id &&
          status_code == o.status_code &&
          transaction_id == o.transaction_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [account, amount, beneficiary_account, beneficiary_bank, beneficiary_name, concept, currency_code, detention_message, error_message, order_id, payment_order_id, pending_reason, reference, request_id, status_code, transaction_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Wire4Client.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
