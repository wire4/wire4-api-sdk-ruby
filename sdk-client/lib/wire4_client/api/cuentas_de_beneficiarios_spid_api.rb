=begin
#Wire4RestAPI

#Referencia de la API de Wire4

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.10

=end

require 'uri'

module Wire4Client
  class CuentasDeBeneficiariosSPIDApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Consulta los beneficiarios SPID registrados
    # Obtiene los beneficiarios SPID registrados al contrato relacionado con la suscripción. Los beneficiarios son los que actualmente se encuentran registrados en banca Monex.
    # @param authorization Header para token
    # @param subscription Es el identificador de la suscripción a esta API.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :account Cuenta del beneficiario, puede ser CLABE (18 dígitos), Tarjeta de débito  (TDD, 16 dígitos) o número de celular (10 dígitos).
    # @option opts [String] :beneficiary_bank Es la clave del banco beneficiario. Se puede obtener del catalogo de &lt;a href&#x3D;\&quot;#operation/getAllInstitutionsUsingGET\&quot;&gt;instituciones.&lt;/a&gt;
    # @option opts [String] :beneficiary_name Es el nombre del beneficiario.
    # @option opts [String] :end_date Es la fecha de inicio del periodo a filtrar en formato dd-mm-yyyy.
    # @option opts [String] :init_date Es la fecha de inicio del periodo a filtrar en formato dd-mm-yyyy.
    # @option opts [String] :rfc Es el Registro Federal de Contribuyentes (RFC) del beneficiario.
    # @option opts [String] :status Es el estado (estatus) de la cuenta, Los valores pueden ser &lt;b&gt;PENDING&lt;/b&gt; y &lt;b&gt;REGISTERED&lt;/b&gt;.
    # @return [SpidBeneficiariesResponse]
    def get_spid_beneficiaries_for_account(authorization, subscription, opts = {})
      data, _status_code, _headers = get_spid_beneficiaries_for_account_with_http_info(authorization, subscription, opts)
      data
    end

    # Consulta los beneficiarios SPID registrados
    # Obtiene los beneficiarios SPID registrados al contrato relacionado con la suscripción. Los beneficiarios son los que actualmente se encuentran registrados en banca Monex.
    # @param authorization Header para token
    # @param subscription Es el identificador de la suscripción a esta API.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :account Cuenta del beneficiario, puede ser CLABE (18 dígitos), Tarjeta de débito  (TDD, 16 dígitos) o número de celular (10 dígitos).
    # @option opts [String] :beneficiary_bank Es la clave del banco beneficiario. Se puede obtener del catalogo de &lt;a href&#x3D;\&quot;#operation/getAllInstitutionsUsingGET\&quot;&gt;instituciones.&lt;/a&gt;
    # @option opts [String] :beneficiary_name Es el nombre del beneficiario.
    # @option opts [String] :end_date Es la fecha de inicio del periodo a filtrar en formato dd-mm-yyyy.
    # @option opts [String] :init_date Es la fecha de inicio del periodo a filtrar en formato dd-mm-yyyy.
    # @option opts [String] :rfc Es el Registro Federal de Contribuyentes (RFC) del beneficiario.
    # @option opts [String] :status Es el estado (estatus) de la cuenta, Los valores pueden ser &lt;b&gt;PENDING&lt;/b&gt; y &lt;b&gt;REGISTERED&lt;/b&gt;.
    # @return [Array<(SpidBeneficiariesResponse, Fixnum, Hash)>] SpidBeneficiariesResponse data, response status code and response headers
    def get_spid_beneficiaries_for_account_with_http_info(authorization, subscription, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CuentasDeBeneficiariosSPIDApi.get_spid_beneficiaries_for_account ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling CuentasDeBeneficiariosSPIDApi.get_spid_beneficiaries_for_account"
      end
      # verify the required parameter 'subscription' is set
      if @api_client.config.client_side_validation && subscription.nil?
        fail ArgumentError, "Missing the required parameter 'subscription' when calling CuentasDeBeneficiariosSPIDApi.get_spid_beneficiaries_for_account"
      end
      if @api_client.config.client_side_validation && subscription.to_s.length > 36
        fail ArgumentError, 'invalid value for "subscription" when calling CuentasDeBeneficiariosSPIDApi.get_spid_beneficiaries_for_account, the character length must be smaller than or equal to 36.'
      end

      if @api_client.config.client_side_validation && subscription.to_s.length < 36
        fail ArgumentError, 'invalid value for "subscription" when calling CuentasDeBeneficiariosSPIDApi.get_spid_beneficiaries_for_account, the character length must be great than or equal to 36.'
      end

      if @api_client.config.client_side_validation && subscription !~ Regexp.new(/[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[34][A-Fa-f0-9]{3}-[89ab][A-Fa-f0-9]{3}-[A-Fa-f0-9]{12}$/)
        fail ArgumentError, "invalid value for 'subscription' when calling CuentasDeBeneficiariosSPIDApi.get_spid_beneficiaries_for_account, must conform to the pattern /[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[34][A-Fa-f0-9]{3}-[89ab][A-Fa-f0-9]{3}-[A-Fa-f0-9]{12}$/."
      end

      # resource path
      local_var_path = '/subscriptions/{subscription}/beneficiaries/spid'.sub('{' + 'subscription' + '}', subscription.to_s)

      # query parameters
      query_params = {}
      query_params[:'account'] = opts[:'account'] if !opts[:'account'].nil?
      query_params[:'beneficiary_bank'] = opts[:'beneficiary_bank'] if !opts[:'beneficiary_bank'].nil?
      query_params[:'beneficiary_name'] = opts[:'beneficiary_name'] if !opts[:'beneficiary_name'].nil?
      query_params[:'end_date'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'init_date'] = opts[:'init_date'] if !opts[:'init_date'].nil?
      query_params[:'rfc'] = opts[:'rfc'] if !opts[:'rfc'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpidBeneficiariesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CuentasDeBeneficiariosSPIDApi#get_spid_beneficiaries_for_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Pre-registro de cuentas de beneficiarios SPID®
    # Pre-registra una o más cuentas de beneficiario SPID® en la plataforma de Wire4, ésta le proporcionaará una URL donde lo llevará al centro de autorización para que el cuentahabiente Monex ingrese su llave digital para confirmar el alta de las cuentas de beneficiarios.<br/> Los posibles valores de <em>relationship</em> y <em>kind_of_relationship</em> se deben  obtener de <a href=\"#operation/getAvailableRelationshipsMonexUsingGET\">/subscriptions/{subscription}/beneficiaries/relationships.</a><br/><br/>La confirmación de registro en Monex se realizará a través de una notificación a los webhooks registrados con el evento de tipo <a href=\"#section/Eventos/Tipos-de-Eventos\">ACCOUNT.CREATED.</a>
    # @param authorization Header para token
    # @param request_spid_dto Información de la cuenta del beneficiario
    # @param subscription Es el identificador de la suscripción a esta API.
    # @param [Hash] opts the optional parameters
    # @return [TokenRequiredResponse]
    def pre_register_accounts_using_post1(authorization, request_spid_dto, subscription, opts = {})
      data, _status_code, _headers = pre_register_accounts_using_post1_with_http_info(authorization, request_spid_dto, subscription, opts)
      data
    end

    # Pre-registro de cuentas de beneficiarios SPID®
    # Pre-registra una o más cuentas de beneficiario SPID® en la plataforma de Wire4, ésta le proporcionaará una URL donde lo llevará al centro de autorización para que el cuentahabiente Monex ingrese su llave digital para confirmar el alta de las cuentas de beneficiarios.&lt;br/&gt; Los posibles valores de &lt;em&gt;relationship&lt;/em&gt; y &lt;em&gt;kind_of_relationship&lt;/em&gt; se deben  obtener de &lt;a href&#x3D;\&quot;#operation/getAvailableRelationshipsMonexUsingGET\&quot;&gt;/subscriptions/{subscription}/beneficiaries/relationships.&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;La confirmación de registro en Monex se realizará a través de una notificación a los webhooks registrados con el evento de tipo &lt;a href&#x3D;\&quot;#section/Eventos/Tipos-de-Eventos\&quot;&gt;ACCOUNT.CREATED.&lt;/a&gt;
    # @param authorization Header para token
    # @param request_spid_dto Información de la cuenta del beneficiario
    # @param subscription Es el identificador de la suscripción a esta API.
    # @param [Hash] opts the optional parameters
    # @return [Array<(TokenRequiredResponse, Fixnum, Hash)>] TokenRequiredResponse data, response status code and response headers
    def pre_register_accounts_using_post1_with_http_info(authorization, request_spid_dto, subscription, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CuentasDeBeneficiariosSPIDApi.pre_register_accounts_using_post1 ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling CuentasDeBeneficiariosSPIDApi.pre_register_accounts_using_post1"
      end
      # verify the required parameter 'request_spid_dto' is set
      if @api_client.config.client_side_validation && request_spid_dto.nil?
        fail ArgumentError, "Missing the required parameter 'request_spid_dto' when calling CuentasDeBeneficiariosSPIDApi.pre_register_accounts_using_post1"
      end
      # verify the required parameter 'subscription' is set
      if @api_client.config.client_side_validation && subscription.nil?
        fail ArgumentError, "Missing the required parameter 'subscription' when calling CuentasDeBeneficiariosSPIDApi.pre_register_accounts_using_post1"
      end
      if @api_client.config.client_side_validation && subscription.to_s.length > 36
        fail ArgumentError, 'invalid value for "subscription" when calling CuentasDeBeneficiariosSPIDApi.pre_register_accounts_using_post1, the character length must be smaller than or equal to 36.'
      end

      if @api_client.config.client_side_validation && subscription.to_s.length < 36
        fail ArgumentError, 'invalid value for "subscription" when calling CuentasDeBeneficiariosSPIDApi.pre_register_accounts_using_post1, the character length must be great than or equal to 36.'
      end

      if @api_client.config.client_side_validation && subscription !~ Regexp.new(/[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[34][A-Fa-f0-9]{3}-[89ab][A-Fa-f0-9]{3}-[A-Fa-f0-9]{12}$/)
        fail ArgumentError, "invalid value for 'subscription' when calling CuentasDeBeneficiariosSPIDApi.pre_register_accounts_using_post1, must conform to the pattern /[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[34][A-Fa-f0-9]{3}-[89ab][A-Fa-f0-9]{3}-[A-Fa-f0-9]{12}$/."
      end

      # resource path
      local_var_path = '/subscriptions/{subscription}/beneficiaries/spid'.sub('{' + 'subscription' + '}', subscription.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request_spid_dto)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TokenRequiredResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CuentasDeBeneficiariosSPIDApi#pre_register_accounts_using_post1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
