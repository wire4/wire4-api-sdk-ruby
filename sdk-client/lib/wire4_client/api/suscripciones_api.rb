=begin
#Wire4RestAPI

#Referencia de la API de Wire4

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.10

=end

require 'uri'

module Wire4Client
  class SuscripcionesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Cambia el estatus de la suscripción
    # Se cambia el estatus de la suscripción, los posibles valores son ACTIVE ó INACTIVE
    # @param authorization Header para token
    # @param request request
    # @param subscription subscription
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def change_subscription_status_using_put(authorization, request, subscription, opts = {})
      change_subscription_status_using_put_with_http_info(authorization, request, subscription, opts)
      nil
    end

    # Cambia el estatus de la suscripción
    # Se cambia el estatus de la suscripción, los posibles valores son ACTIVE ó INACTIVE
    # @param authorization Header para token
    # @param request request
    # @param subscription subscription
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def change_subscription_status_using_put_with_http_info(authorization, request, subscription, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SuscripcionesApi.change_subscription_status_using_put ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling SuscripcionesApi.change_subscription_status_using_put"
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling SuscripcionesApi.change_subscription_status_using_put"
      end
      # verify the required parameter 'subscription' is set
      if @api_client.config.client_side_validation && subscription.nil?
        fail ArgumentError, "Missing the required parameter 'subscription' when calling SuscripcionesApi.change_subscription_status_using_put"
      end
      # resource path
      local_var_path = '/subscriptions/{subscription}/status'.sub('{' + 'subscription' + '}', subscription.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SuscripcionesApi#change_subscription_status_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Registra una pre-suscripción
    # Registra una pre-suscripción para operar un contrato a través de un aplicación socio de la plataforma, proporcionando una URL donde el cliente Monex debe autorizar el acceso a los datos de su cuenta a el socio.<br/>Una vez que el cuentahabiente autorice el acceso, se envía un mensaje webhook con el evento 'ENROLLMENT.CREATED', el cuál contiene los datos de acceso a esta API.
    # @param authorization Header para token
    # @param pre_enrollment_data Información para la pre-suscripción
    # @param [Hash] opts the optional parameters
    # @return [PreEnrollmentResponse]
    def pre_enrollment_monex_user_using_post(authorization, pre_enrollment_data, opts = {})
      data, _status_code, _headers = pre_enrollment_monex_user_using_post_with_http_info(authorization, pre_enrollment_data, opts)
      data
    end

    # Registra una pre-suscripción
    # Registra una pre-suscripción para operar un contrato a través de un aplicación socio de la plataforma, proporcionando una URL donde el cliente Monex debe autorizar el acceso a los datos de su cuenta a el socio.&lt;br/&gt;Una vez que el cuentahabiente autorice el acceso, se envía un mensaje webhook con el evento &#39;ENROLLMENT.CREATED&#39;, el cuál contiene los datos de acceso a esta API.
    # @param authorization Header para token
    # @param pre_enrollment_data Información para la pre-suscripción
    # @param [Hash] opts the optional parameters
    # @return [Array<(PreEnrollmentResponse, Fixnum, Hash)>] PreEnrollmentResponse data, response status code and response headers
    def pre_enrollment_monex_user_using_post_with_http_info(authorization, pre_enrollment_data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SuscripcionesApi.pre_enrollment_monex_user_using_post ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling SuscripcionesApi.pre_enrollment_monex_user_using_post"
      end
      # verify the required parameter 'pre_enrollment_data' is set
      if @api_client.config.client_side_validation && pre_enrollment_data.nil?
        fail ArgumentError, "Missing the required parameter 'pre_enrollment_data' when calling SuscripcionesApi.pre_enrollment_monex_user_using_post"
      end
      # resource path
      local_var_path = '/subscriptions/pre-subscription'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(pre_enrollment_data)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PreEnrollmentResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SuscripcionesApi#pre_enrollment_monex_user_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Elimina una suscripción por el identificador de la suscripción
    # Elimina una suscripción, una vez eliminada ya no se podrán realizar operacions en el API utilizando esta suscripción
    # @param authorization Header para token
    # @param subscription El identificador de la suscripción a esta API
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def remove_enrollment_user_using_delete(authorization, subscription, opts = {})
      remove_enrollment_user_using_delete_with_http_info(authorization, subscription, opts)
      nil
    end

    # Elimina una suscripción por el identificador de la suscripción
    # Elimina una suscripción, una vez eliminada ya no se podrán realizar operacions en el API utilizando esta suscripción
    # @param authorization Header para token
    # @param subscription El identificador de la suscripción a esta API
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def remove_enrollment_user_using_delete_with_http_info(authorization, subscription, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SuscripcionesApi.remove_enrollment_user_using_delete ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling SuscripcionesApi.remove_enrollment_user_using_delete"
      end
      # verify the required parameter 'subscription' is set
      if @api_client.config.client_side_validation && subscription.nil?
        fail ArgumentError, "Missing the required parameter 'subscription' when calling SuscripcionesApi.remove_enrollment_user_using_delete"
      end
      if @api_client.config.client_side_validation && subscription.to_s.length > 36
        fail ArgumentError, 'invalid value for "subscription" when calling SuscripcionesApi.remove_enrollment_user_using_delete, the character length must be smaller than or equal to 36.'
      end

      if @api_client.config.client_side_validation && subscription.to_s.length < 36
        fail ArgumentError, 'invalid value for "subscription" when calling SuscripcionesApi.remove_enrollment_user_using_delete, the character length must be great than or equal to 36.'
      end

      if @api_client.config.client_side_validation && subscription !~ Regexp.new(/[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[34][A-Fa-f0-9]{3}-[89ab][A-Fa-f0-9]{3}-[A-Fa-f0-9]{12}$/)
        fail ArgumentError, "invalid value for 'subscription' when calling SuscripcionesApi.remove_enrollment_user_using_delete, must conform to the pattern /[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[34][A-Fa-f0-9]{3}-[89ab][A-Fa-f0-9]{3}-[A-Fa-f0-9]{12}$/."
      end

      # resource path
      local_var_path = '/subscriptions/{subscription}'.sub('{' + 'subscription' + '}', subscription.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SuscripcionesApi#remove_enrollment_user_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Elimina una pre-suscripción
    # Se elimina una pre-suscripción, sólo se elimina en caso de que el cliente Monex no haya concedido su autorización de acceso (token), es decir que la pre-suscripcion este pendiente.
    # @param authorization Header para token
    # @param subscription El identificador de la suscripción a esta API
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def remove_subscription_pending_status_using_delete(authorization, subscription, opts = {})
      remove_subscription_pending_status_using_delete_with_http_info(authorization, subscription, opts)
      nil
    end

    # Elimina una pre-suscripción
    # Se elimina una pre-suscripción, sólo se elimina en caso de que el cliente Monex no haya concedido su autorización de acceso (token), es decir que la pre-suscripcion este pendiente.
    # @param authorization Header para token
    # @param subscription El identificador de la suscripción a esta API
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def remove_subscription_pending_status_using_delete_with_http_info(authorization, subscription, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SuscripcionesApi.remove_subscription_pending_status_using_delete ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling SuscripcionesApi.remove_subscription_pending_status_using_delete"
      end
      # verify the required parameter 'subscription' is set
      if @api_client.config.client_side_validation && subscription.nil?
        fail ArgumentError, "Missing the required parameter 'subscription' when calling SuscripcionesApi.remove_subscription_pending_status_using_delete"
      end
      if @api_client.config.client_side_validation && subscription.to_s.length > 36
        fail ArgumentError, 'invalid value for "subscription" when calling SuscripcionesApi.remove_subscription_pending_status_using_delete, the character length must be smaller than or equal to 36.'
      end

      if @api_client.config.client_side_validation && subscription.to_s.length < 36
        fail ArgumentError, 'invalid value for "subscription" when calling SuscripcionesApi.remove_subscription_pending_status_using_delete, the character length must be great than or equal to 36.'
      end

      if @api_client.config.client_side_validation && subscription !~ Regexp.new(/[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[34][A-Fa-f0-9]{3}-[89ab][A-Fa-f0-9]{3}-[A-Fa-f0-9]{12}$/)
        fail ArgumentError, "invalid value for 'subscription' when calling SuscripcionesApi.remove_subscription_pending_status_using_delete, must conform to the pattern /[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[34][A-Fa-f0-9]{3}-[89ab][A-Fa-f0-9]{3}-[A-Fa-f0-9]{12}$/."
      end

      # resource path
      local_var_path = '/subscriptions/pre-subscription/{subscription}'.sub('{' + 'subscription' + '}', subscription.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SuscripcionesApi#remove_subscription_pending_status_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
