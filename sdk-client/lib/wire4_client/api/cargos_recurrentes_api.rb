=begin
#Wire4RestAPI

#Referencia de la API de Wire4

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.10

=end

require 'uri'

module Wire4Client
  class CargosRecurrentesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Cancelación/desubscripción de cargos recurrentes
    #  Se solicita la desuscripción de un cargo recurrente activo. En el request llevará el orderId que identifica el cargo recurrente a eliminar/dar de baja se deshabilitará tanto de openpay como del sistem wire4.<br> Nota: Debe considerar que para hacer uso de esta funcionalidad debe contar con un scope  especial
    # @param authorization Header para token
    # @param order_id orderId
    # @param [Hash] opts the optional parameters
    # @return [ConfirmRecurringCharge]
    def delete_recurring_charge_using_delete(authorization, order_id, opts = {})
      data, _status_code, _headers = delete_recurring_charge_using_delete_with_http_info(authorization, order_id, opts)
      data
    end

    # Cancelación/desubscripción de cargos recurrentes
    #  Se solicita la desuscripción de un cargo recurrente activo. En el request llevará el orderId que identifica el cargo recurrente a eliminar/dar de baja se deshabilitará tanto de openpay como del sistem wire4.&lt;br&gt; Nota: Debe considerar que para hacer uso de esta funcionalidad debe contar con un scope  especial
    # @param authorization Header para token
    # @param order_id orderId
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConfirmRecurringCharge, Fixnum, Hash)>] ConfirmRecurringCharge data, response status code and response headers
    def delete_recurring_charge_using_delete_with_http_info(authorization, order_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CargosRecurrentesApi.delete_recurring_charge_using_delete ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling CargosRecurrentesApi.delete_recurring_charge_using_delete"
      end
      # verify the required parameter 'order_id' is set
      if @api_client.config.client_side_validation && order_id.nil?
        fail ArgumentError, "Missing the required parameter 'order_id' when calling CargosRecurrentesApi.delete_recurring_charge_using_delete"
      end
      # resource path
      local_var_path = '/recurring-charge/{orderId}'.sub('{' + 'orderId' + '}', order_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConfirmRecurringCharge')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CargosRecurrentesApi#delete_recurring_charge_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Registro de cargos recurrentes
    #  Se registra una solicitud para generar un plan de cargos recurrentes. En la respuesta se proporcionará una dirección URL que lo llevará al sitio donde se le solicitará ingresar los datos de tarjeta a la que se aplicarán los cargos de acuerdo al plan seleccionado.<br> Nota: Debe considerar que para hacer uso de esta funcionalidad debe contar con un scope  especial
    # @param authorization Header para token
    # @param request_recurring_charge Información de la solicitud para aplicar cargos recurrentes
    # @param [Hash] opts the optional parameters
    # @return [ConfirmRecurringCharge]
    def register_recurring_charge_using_post(authorization, request_recurring_charge, opts = {})
      data, _status_code, _headers = register_recurring_charge_using_post_with_http_info(authorization, request_recurring_charge, opts)
      data
    end

    # Registro de cargos recurrentes
    #  Se registra una solicitud para generar un plan de cargos recurrentes. En la respuesta se proporcionará una dirección URL que lo llevará al sitio donde se le solicitará ingresar los datos de tarjeta a la que se aplicarán los cargos de acuerdo al plan seleccionado.&lt;br&gt; Nota: Debe considerar que para hacer uso de esta funcionalidad debe contar con un scope  especial
    # @param authorization Header para token
    # @param request_recurring_charge Información de la solicitud para aplicar cargos recurrentes
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConfirmRecurringCharge, Fixnum, Hash)>] ConfirmRecurringCharge data, response status code and response headers
    def register_recurring_charge_using_post_with_http_info(authorization, request_recurring_charge, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CargosRecurrentesApi.register_recurring_charge_using_post ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling CargosRecurrentesApi.register_recurring_charge_using_post"
      end
      # verify the required parameter 'request_recurring_charge' is set
      if @api_client.config.client_side_validation && request_recurring_charge.nil?
        fail ArgumentError, "Missing the required parameter 'request_recurring_charge' when calling CargosRecurrentesApi.register_recurring_charge_using_post"
      end
      # resource path
      local_var_path = '/recurring-charge'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request_recurring_charge)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConfirmRecurringCharge')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CargosRecurrentesApi#register_recurring_charge_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
